name: Run PHPUnit on pull requests

on:
- push
- pull_request

jobs:
  build:
    name: Build
    strategy:
      matrix:
        node: ['10.16.3']
        php: ['7.3']
    runs-on: ubuntu-latest
    container:
      image: php:${{ matrix.php }}
      volumes:
      - $GITHUB_WORKSPACE:/var/www/html
    steps:
    - name: Set up container
      run: |
        echo "Install base packages"
        apt-get update
        apt-get install -y build-essential \
          libssl-dev \
          gnupg \
          libfreetype6-dev \
          libjpeg62-turbo-dev \
          libmcrypt-dev \
          libicu-dev \
          libxml2-dev \
          vim \
          wget \
          unzip \
          git \
          subversion \
          default-mysql-client

        echo "Install composer"
        curl -sS -L https://getcomposer.org/installer | php
        mv composer.phar /usr/local/bin/composer

        echo "Install PHP extensions"
        docker-php-ext-install -j$(nproc) iconv intl xml soap opcache pdo pdo_mysql mysqli mbstring
        docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/
        docker-php-ext-install -j$(nproc) gd

    - name: Install node
      run: |
        echo "Install NVM"
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
        if [ -s "$HOME/.nvm/nvm.sh" ]; then \. "$HOME/.nvm/nvm.sh"; fi
        echo "Install node"
        nvm install ${{ matrix.node }}
        nvm use ${{ matrix.node }}

        echo "Install yarn"
        curl -sS -L https://yarnpkg.com/install.sh | bash

    - name: Install phive
      run: |
        wget -O phive.phar "https://phar.io/releases/phive.phar"
        wget -O phive.phar.asc "https://phar.io/releases/phive.phar.asc"
        gpg --keyserver ipv4.pool.sks-keyservers.net --recv-keys 0x9D8A98B29B2D5D79
        gpg --verify phive.phar.asc phive.phar
        rm phive.phar.asc
        chmod +x phive.phar
        mv phive.phar /usr/local/bin/phive

    - uses: actions/checkout@v1

    - name: Install php-scoper
      run: phive install humbug/php-scoper@0.11.4 --force-accept-unsigned

    - name: Install composer dependencies
      run: composer install --prefer-dist --no-interaction --no-progress
  
    - name: Run php-scoper
      run: ./tools/php-scoper add-prefix

    - name: Remove composer dev dependencies
      run: composer update --no-dev --optimize-autoloader --prefer-dist --no-interaction --no-progress

    - name: Run yarn install
      run: |
        if [ -s "$HOME/.nvm/nvm.sh" ]; then \. "$HOME/.nvm/nvm.sh"; fi
        $HOME/.yarn/bin/yarn install --non-interactive --no-progress

    - name: Run yarn build
      run: |
        if [ -s "$HOME/.nvm/nvm.sh" ]; then \. "$HOME/.nvm/nvm.sh"; fi
        $HOME/.yarn/bin/yarn build
    
    - name: Trim to production node_modules
      run: |
        rm -rf node_modules
        if [ -s "$HOME/.nvm/nvm.sh" ]; then \. "$HOME/.nvm/nvm.sh"; fi
        $HOME/.yarn/bin/yarn install --production --no-bin-links --non-interactive --no-progress

    - name: Upload build result
      uses: actions/upload-artifact@v1
      with:
        name: build
        path: build
    
    - name: Upload languages
      uses: actions/upload-artifact@v1
      with:
        name: languages
        path: languages
    
    - name: Upload styles
      uses: actions/upload-artifact@v1
      with:
        name: css
        path: css

  test_singlesite:
    name: Test single site
    needs: build
    strategy:
      matrix:
        phpunit: ['^6']
        mysql:
        - '5.6'
        - '5.7'
        # - '8.0'
        php:
        - '5.6'
        - '7.0'
        - '7.1'
        - '7.2'
        - '7.3'
        wordpress:
        - '5.0'
        - '5.1'
        - '5.2'
        - '5.3'
        - latest
        - trunk
    runs-on: ubuntu-latest
    container:
      image: php:${{ matrix.php }}
      volumes:
      - $GITHUB_WORKSPACE:/var/www/html
    services:
      mysql:
        image: mysql:${{ matrix.mysql }}
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
        - 3306
        volumes:
        - $HOME/mysql:/var/lib/mysql
    steps:
    - name: Set up container
      run: |
        echo "Install base packages"
        apt-get update
        apt-get install -y build-essential \
          libssl-dev \
          gnupg \
          libfreetype6-dev \
          libjpeg62-turbo-dev \
          libmcrypt-dev \
          libicu-dev \
          libxml2-dev \
          vim \
          wget \
          unzip \
          git \
          subversion \
          default-mysql-client

        echo "Install PHP extensions"
        docker-php-ext-install -j$(nproc) iconv intl xml soap opcache pdo pdo_mysql mysqli mbstring
        docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/
        docker-php-ext-install -j$(nproc) gd

    - name: Install phive
      run: |
        wget -O phive.phar "https://phar.io/releases/phive.phar"
        wget -O phive.phar.asc "https://phar.io/releases/phive.phar.asc"
        gpg --keyserver ipv4.pool.sks-keyservers.net --recv-keys 0x9D8A98B29B2D5D79
        gpg --verify phive.phar.asc phive.phar
        rm phive.phar.asc
        chmod +x phive.phar
        mv phive.phar /usr/local/bin/phive

    - uses: actions/checkout@v1

    - name: Download build files
      uses: actions/download-artifact@v1
      with:
        name: build

    - name: Download languages
      uses: actions/download-artifact@v1
      with:
        name: languages
    
    - name: Download styles
      uses: actions/download-artifact@v1
      with:
        name: css

    - name: Install phpunit
      run: phive install phpunit@6 --trust-gpg-keys 4AA394086372C20A

    - name: Install WordPress Test Suite
      run: bash bin/install-wp-tests.sh wordpress_test root root mysql ${{ matrix.wordpress }}

    - name: Run phpunit
      run: ./tools/phpunit $GITHUB_WORKSPACE

  test_multisite:
    name: Test multisite
    needs: build
    strategy:
      matrix:
        phpunit: ['^6']
        mysql:
        - '5.6'
        # - '5.7'
        # - '8.0'
        php:
        - '5.6'
        - '7.0'
        - '7.1'
        - '7.2'
        - '7.3'
        wordpress:
        - '5.0'
        - '5.1'
        - '5.2'
        - '5.3'
        - latest
        - trunk
    runs-on: ubuntu-latest
    container:
      image: php:${{ matrix.php }}
      volumes:
      - $GITHUB_WORKSPACE:/var/www/html
    services:
      mysql:
        image: mysql:${{ matrix.mysql }}
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
        - 3306
        volumes:
        - $HOME/mysql:/var/lib/mysql
    steps:
    - name: Set up container
      run: |
        echo "Install base packages"
        apt-get update
        apt-get install -y build-essential \
          libssl-dev \
          gnupg \
          libfreetype6-dev \
          libjpeg62-turbo-dev \
          libmcrypt-dev \
          libicu-dev \
          libxml2-dev \
          vim \
          wget \
          unzip \
          git \
          subversion \
          default-mysql-client

        echo "Install PHP extensions"
        docker-php-ext-install -j$(nproc) iconv intl xml soap opcache pdo pdo_mysql mysqli mbstring
        docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/
        docker-php-ext-install -j$(nproc) gd

    - name: Install phive
      run: |
        wget -O phive.phar "https://phar.io/releases/phive.phar"
        wget -O phive.phar.asc "https://phar.io/releases/phive.phar.asc"
        gpg --keyserver ipv4.pool.sks-keyservers.net --recv-keys 0x9D8A98B29B2D5D79
        gpg --verify phive.phar.asc phive.phar
        rm phive.phar.asc
        chmod +x phive.phar
        mv phive.phar /usr/local/bin/phive

    - uses: actions/checkout@v1

    - name: Download build files
      uses: actions/download-artifact@v1
      with:
        name: build

    - name: Download languages
      uses: actions/download-artifact@v1
      with:
        name: languages
    
    - name: Download styles
      uses: actions/download-artifact@v1
      with:
        name: css

    - name: Install phpunit
      run: phive install phpunit@6 --trust-gpg-keys 4AA394086372C20A

    - name: Install WordPress Test Suite
      run: bash bin/install-wp-tests.sh wordpress_test root root mysql ${{ matrix.wordpress }}

    - name: Run phpunit
      run: ./tools/phpunit -c phpunit-multisite.xml $GITHUB_WORKSPACE